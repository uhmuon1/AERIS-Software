#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include <stdio.h>

// Pin Definitions
#define LED_PIN 25
#define SDA_PIN 4
#define SCL_PIN 5
#define GPS_I2C i2c0
#define GPS_ADDR 0x42

// NEO-M9N registers
#define DATA_STREAM_REG 0xFF
#define BYTES_AVAILABLE_REG 0xFD

// Debug function prototypes
void check_i2c_state(void);
void test_i2c_pins(void);
bool verify_i2c_device(void);
void debug_i2c_bus(void);

// Function to check I2C line states
void check_i2c_state(void) {
    printf("\n=== I2C Line States ===\n");
    printf("SDA Current State: %d\n", gpio_get(SDA_PIN));
    printf("SCL Current State: %d\n", gpio_get(SCL_PIN));
    printf("SDA Function Mode: %d (Should be 3 for I2C)\n", gpio_get_function(SDA_PIN));
    printf("SCL Function Mode: %d (Should be 3 for I2C)\n", gpio_get_function(SCL_PIN));
}

// Function to test I2C pins over time
void test_i2c_pins(void) {
    printf("\n=== Testing I2C Lines for 1 second ===\n");
    int sda_low_count = 0;
    int scl_low_count = 0;
    
    for(int i = 0; i < 10; i++) {
        if(gpio_get(SDA_PIN) == 0) sda_low_count++;
        if(gpio_get(SCL_PIN) == 0) scl_low_count++;
        sleep_ms(100);
    }
    
    printf("Times SDA was LOW: %d/10\n", sda_low_count);
    printf("Times SCL was LOW: %d/10\n", scl_low_count);
    
    if(sda_low_count > 8) printf("WARNING: SDA might be stuck LOW\n");
    if(scl_low_count > 8) printf("WARNING: SCL might be stuck LOW\n");
}

// Function to verify I2C device presence
bool verify_i2c_device(void) {
    printf("\n=== Checking for GPS Device ===\n");
    uint8_t rxdata;
    int ret;
    
    // Try to read one byte from the device
    ret = i2c_read_blocking(GPS_I2C, GPS_ADDR, &rxdata, 1, false);
    
    if (ret < 0) {
        printf("Error: Could not communicate with GPS device\n");
        printf("Return code: %d\n", ret);
        return false;
    }
    
    printf("Successfully communicated with GPS device!\n");
    return true;
}

// Function to debug I2C bus
void debug_i2c_bus(void) {
    printf("\n=== I2C Bus Status ===\n");
    printf("Write available: %d\n", i2c_get_write_available(GPS_I2C));
    printf("Read available: %d\n", i2c_get_read_available(GPS_I2C));
}

// Main GPS data reading function
void read_gps_data(void) {
    uint8_t bytes_available[2];
    uint8_t reg = BYTES_AVAILABLE_REG;
    
    printf("\n=== Attempting GPS Read ===\n");
    
    // Check bus state before attempting read
    debug_i2c_bus();
    
    int ret = i2c_write_blocking(GPS_I2C, GPS_ADDR, &reg, 1, true);
    printf("Write command return code: %d\n", ret);
    
    if (ret < 0) {
        printf("Error writing to GPS. Attempting reset...\n");
        i2c_deinit(GPS_I2C);
        sleep_ms(100);
        i2c_init(GPS_I2C, 100000);
        return;
    }
    
    ret = i2c_read_blocking(GPS_I2C, GPS_ADDR, bytes_available, 2, false);
    printf("Read command return code: %d\n", ret);
    
    if (ret >= 0) {
        printf("Bytes available: %d\n", (bytes_available[0] << 8) | bytes_available[1]);
    }
}

int main() {
    // Initialize USB serial first
    stdio_init_all();
    stdio_usb_init();
    sleep_ms(3000);  // Wait for USB to initialize
    
    printf("\n\n=== Starting GPS Debug Program ===\n");
    printf("Compiled on: %s %s\n", __DATE__, __TIME__);
    
    // Initialize LED
    gpio_init(LED_PIN);
    gpio_set_dir(LED_PIN, GPIO_OUT);
    printf("LED initialized\n");
    
    // Initialize I2C pins
    printf("\nConfiguring I2C pins...\n");
    gpio_set_function(SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(SCL_PIN, GPIO_FUNC_I2C);
    
    // Optional: Enable internal pullups if needed
    // Uncomment these lines if you need internal pullups
    /*
    gpio_pull_up(SDA_PIN);
    gpio_pull_up(SCL_PIN);
    printf("Internal pullups enabled\n");
    */
    
    sleep_ms(250);  // Allow pins to stabilize
    
    // Check initial pin states
    check_i2c_state();
    
    // Initialize I2C peripheral
    printf("\nInitializing I2C...\n");
    i2c_init(GPS_I2C, 100000);  // 100kHz standard mode
    
    if (!i2c_get_write_available(GPS_I2C)) {
        printf("ERROR: I2C failed to initialize\n");
        while(1) {
            gpio_put(LED_PIN, 1);
            sleep_ms(100);
            gpio_put(LED_PIN, 0);
            sleep_ms(100);
        }
    }
    
    printf("I2C initialized successfully\n");
    
    // Test I2C lines
    test_i2c_pins();
    
    // Verify device presence
    if (!verify_i2c_device()) {
        printf("WARNING: GPS device not responding\n");
    }
    
    printf("\n=== Starting main loop ===\n");
    
    while (true) {
        gpio_put(LED_PIN, 1);
        read_gps_data();
        check_i2c_state();
        sleep_ms(1000);
        gpio_put(LED_PIN, 0);
        sleep_ms(1000);
    }
    
    return 0;
}
