#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"

#define GNSS_ADDR 0x42

// Configuration message to switch to UBX-03 protocol
const uint8_t ubx_cfg_prt[] = {
    0xB5, 0x62,           // Sync chars
    0x06, 0x00,           // CFG-PRT message
    0x14, 0x00,           // Length (20 bytes)
    0x00,                 // Port ID (I2C)
    0x00,                 // Reserved
    0x00, 0x00,           // TX ready
    0x84, 0x00, 0x00, 0x00, // Mode (8N1)
    0x00, 0x00, 0x00, 0x00, // Baudrate (not used for I2C)
    0x03, 0x00,           // inProtoMask (UBX-03 protocol)
    0x03, 0x00,           // outProtoMask (UBX-03 protocol)
    0x00, 0x00,           // Flags
    0x00, 0x00,           // Reserved
    0x86, 0x8C            // Checksum
};

// Enable NAV-PVT messages (for position, velocity, time)
const uint8_t ubx_cfg_msg[] = {
    0xB5, 0x62,           // Sync chars
    0x06, 0x01,           // CFG-MSG
    0x08, 0x00,           // Length
    0x01,                 // Class
    0x07,                 // ID (NAV-PVT)
    0x01,                 // Rate on I2C
    0x00,                 // Rate on UART1
    0x00,                 // Rate on UART2
    0x00,                 // Rate on USB
    0x00,                 // Rate on SPI
    0x00,                 // Rate on reserved
    0x1D, 0xE5            // Checksum
};

// Save configuration to flash
const uint8_t ubx_cfg_save[] = {
    0xB5, 0x62,           // Sync chars
    0x06, 0x09,           // CFG-CFG
    0x0D, 0x00,           // Length
    0x00, 0x00, 0x00, 0x00, // Clear mask
    0xFF, 0xFF, 0x00, 0x00, // Save mask
    0x00, 0x00, 0x00, 0x00, // Load mask
    0x01,                 // Device mask (BBR)
    0x1B, 0xA5            // Checksum
};

bool send_config_message(i2c_inst_t *i2c, const uint8_t *message, size_t length) {
    printf("Sending message (%d bytes): ", length);
    for(size_t i = 0; i < length; i++) {
        printf("%02X ", message[i]);
    }
    printf("\n");
    
    int bytes_written = i2c_write_blocking(i2c, GNSS_ADDR, message, length, false);
    bool success = (bytes_written == length);
    printf("%s (wrote %d/%d bytes)\n", success ? "Success" : "Failed", bytes_written, length);
    
    return success;
}

int main() {
    stdio_init_all();
    sleep_ms(2000);  // Wait for serial to initialize
    
    printf("\nStarting NEO-M9N UBX-03 Configuration\n");
    printf("-------------------------------------\n");
    
    // Initialize I2C
    i2c_init(i2c_default, 100 * 1000);
    gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
    gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
    
    printf("I2C Initialized\n");
    
    // Step 1: Configure for UBX-03 protocol
    printf("\n1. Configuring for UBX-03 protocol...\n");
    if (!send_config_message(i2c_default, ubx_cfg_prt, sizeof(ubx_cfg_prt))) {
        printf("Failed to configure UBX-03 protocol\n");
        return 1;
    }
    sleep_ms(100);
    
    // Step 2: Enable NAV-PVT messages
    printf("\n2. Enabling NAV-PVT messages...\n");
    if (!send_config_message(i2c_default, ubx_cfg_msg, sizeof(ubx_cfg_msg))) {
        printf("Failed to enable NAV-PVT messages\n");
        return 1;
    }
    sleep_ms(100);
    
    // Step 3: Save configuration
    printf("\n3. Saving configuration to flash...\n");
    if (!send_config_message(i2c_default, ubx_cfg_save, sizeof(ubx_cfg_save))) {
        printf("Failed to save configuration\n");
        return 1;
    }
    
    printf("\nConfiguration complete!\n");
    printf("Please reset the device for changes to take effect.\n");
    printf("After reset, the device should output UBX-03 protocol messages.\n");
    
    // Monitor for acknowledgment
    uint8_t response[100];
    printf("\nMonitoring for response...\n");
    while(1) {
        int bytes_read = i2c_read_blocking(i2c_default, GNSS_ADDR, response, 1, false);
        if (bytes_read > 0) {
            printf("Received: 0x%02X\n", response[0]);
        }
        sleep_ms(100);
    }
    
    return 0;
}
