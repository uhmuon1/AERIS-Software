#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"

#define GNSS_ADDR 0x42

// Configuration message to enable UBX-03 protocol on I2C
const uint8_t ubx_config_data[] = {
    0xB5, 0x62,           // Sync chars
    0x06, 0x00,           // CFG-PRT message
    0x14, 0x00,           // Length (20 bytes)
    0x00,                 // Port ID (I2C)
    0x00,                 // Reserved
    0x00, 0x00,           // TX ready
    0x84, 0x00, 0x00, 0x00, // Mode (8N1)
    0x00, 0x00, 0x00, 0x00, // Baudrate (not used for I2C)
    0x03, 0x00,           // inProtoMask (UBX-03)
    0x03, 0x00,           // outProtoMask (UBX-03)
    0x00, 0x00,           // Flags
    0x00, 0x00,           // Reserved
    0x86, 0x8C            // Checksum

};

// Message to enable NAV-PVT messages
const uint8_t enable_nav_pvt[] = {
    0xB5, 0x62,           // Sync chars
    0x06, 0x01,           // CFG-MSG
    0x08, 0x00,           // Length
    0x01,                 // Class
    0x07,                 // ID (NAV-PVT)
    0x01,                 // Rate on I2C
    0x00,                 // Rate on UART1
    0x00,                 // Rate on UART2
    0x00,                 // Rate on USB
    0x00,                 // Rate on SPI
    0x00,                 // Rate on reserved
    0x1D, 0xE5            // Checksum
};

// Save configuration message
const uint8_t save_config_data[] = {
    0xB5, 0x62,           // Sync chars
    0x06, 0x09,           // CFG-CFG message
    0x0D, 0x00,           // Length (13 bytes)
    0x00, 0x00, 0x00, 0x00, // Clear mask
    0xFF, 0xFF, 0x00, 0x00, // Save mask
    0x00, 0x00, 0x00, 0x00, // Load mask
    0x01,                 // Device mask (BBR)
    0x1B, 0xA5            // Checksum
};

bool send_config_message(i2c_inst_t *i2c, const uint8_t *message, size_t length) {
    printf("Sending configuration message (%d bytes)...\n", length);
    
    // Print message contents for debugging
    printf("Message: ");
    for(size_t i = 0; i < length; i++) {
        printf("%02X ", message[i]);
    }
    printf("\n");
    
    // Send the message
    int bytes_written = i2c_write_blocking(i2c, GNSS_ADDR, message, length, false);
    
    if (bytes_written != length) {
        printf("Failed to send message (wrote %d/%d bytes)\n", bytes_written, length);
        return false;
    }
    
    printf("Message sent successfully\n");
    sleep_ms(250);  // Wait for processing
    return true;
}

int main() {
    stdio_init_all();
    sleep_ms(2000);  // Wait for USB serial to initialize
    
    printf("\nUBX-03 Configuration Program\n");
    printf("---------------------------\n");
    
    // Initialize I2C
    i2c_init(i2c_default, 100 * 1000);
    gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
    gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
    
    printf("1. Sending UBX-03 protocol configuration...\n");
    if (!send_config_message(i2c_default, ubx_config_data, sizeof(ubx_config_data))) {
        printf("Failed to send UBX-03 configuration\n");
        return 1;
    }
    
    printf("\n2. Enabling NAV-PVT messages...\n");
    if (!send_config_message(i2c_default, enable_nav_pvt, sizeof(enable_nav_pvt))) {
        printf("Failed to enable NAV-PVT messages\n");
        return 1;
    }
    
    printf("\n3. Saving configuration to flash...\n");
    if (!send_config_message(i2c_default, save_config_data, sizeof(save_config_data))) {
        printf("Failed to save configuration\n");
        return 1;
    }
    
    printf("\nConfiguration complete!\n");
    printf("The module should now be configured to use UBX-03 protocol over I2C.\n");
    printf("Please reset the module for changes to take effect.\n");
    
    while(1) {
        sleep_ms(1000);
    }
    
    return 0;
}
