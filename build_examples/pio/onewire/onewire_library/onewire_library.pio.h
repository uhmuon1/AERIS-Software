// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// onewire //
// ------- //

#define onewire_wrap_target 8
#define onewire_wrap 16
#define onewire_pio_version 0

#define onewire_offset_reset_bus 0u
#define onewire_offset_fetch_bit 8u

static const uint16_t onewire_program_instructions[] = {
    0xff3c, //  0: set    x, 28           side 1 [15]
    0x1f41, //  1: jmp    x--, 1          side 1 [15]
    0xe628, //  2: set    x, 8            side 0 [6] 
    0x0643, //  3: jmp    x--, 3          side 0 [6] 
    0xa0c0, //  4: mov    isr, pins       side 0     
    0x8020, //  5: push   block           side 0     
    0xe738, //  6: set    x, 24           side 0 [7] 
    0x0f47, //  7: jmp    x--, 7          side 0 [15]
            //     .wrap_target
    0x6021, //  8: out    x, 1            side 0     
    0x152e, //  9: jmp    !x, 14          side 1 [5] 
    0xe822, // 10: set    x, 2            side 0 [8] 
    0x4401, // 11: in     pins, 1         side 0 [4] 
    0x0f4c, // 12: jmp    x--, 12         side 0 [15]
    0x0008, // 13: jmp    8               side 0     
    0xf522, // 14: set    x, 2            side 1 [5] 
    0x1f4f, // 15: jmp    x--, 15         side 1 [15]
    0x4861, // 16: in     null, 1         side 0 [8] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program onewire_program = {
    .instructions = onewire_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = onewire_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config onewire_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + onewire_wrap_target, offset + onewire_wrap);
    sm_config_set_sideset(&c, 1, false, true);
    return c;
}

static inline void onewire_sm_init (PIO pio, uint sm, uint offset, uint pin_num, uint bits_per_word) {
    // create a new state machine configuration
    pio_sm_config c = onewire_program_get_default_config (offset);
    // Input Shift Register configuration settings
    sm_config_set_in_shift (
        &c,
        true,           // shift direction: right
        true,           // autopush: enabled
        bits_per_word   // autopush threshold
    );
    // Output Shift Register configuration settings
    sm_config_set_out_shift (
        &c,
        true,           // shift direction: right
        true,           // autopull: enabled
        bits_per_word   // autopull threshold
    );
    // configure the input and sideset pin groups to start at `pin_num`
    sm_config_set_in_pins (&c, pin_num);
    sm_config_set_sideset_pins (&c, pin_num);
    // configure the clock divider for 1 usec per instruction
    float div = clock_get_hz (clk_sys) * 1e-6;
    sm_config_set_clkdiv (&c, div);
    // apply the configuration and initialise the program counter
    pio_sm_init (pio, sm, offset + onewire_offset_fetch_bit, &c);
    // enable the state machine
    pio_sm_set_enabled (pio, sm, true);
}
static inline uint onewire_reset_instr (uint offset) {
    // encode a "jmp reset_bus side 0" instruction for the state machine
    return pio_encode_jmp (offset + onewire_offset_reset_bus) | pio_encode_sideset (1, 0);
}

#endif

